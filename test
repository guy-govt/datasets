cube.py:

import numpy as np
import pygame
import math

from fpvector import FPDecPoint3
from fpvector import FPDecVec3
from fpmatrix import FPDecMtx44
from fpquaternion import FPQuaternion

# Eight corners of the cube as points
_verts = [FPDecPoint3( 1, -1, -1),
          FPDecPoint3( 1,  1, -1),
          FPDecPoint3(-1,  1, -1),
          FPDecPoint3(-1, -1, -1),
          FPDecPoint3( 1, -1,  1),
          FPDecPoint3( 1,  1,  1),
          FPDecPoint3(-1, -1,  1),
          FPDecPoint3(-1,  1,  1)]
# Six sides of the cube as indexes into the list of _verts
_surfaces = [(0,1,2,3),
             (3,2,7,6),
             (6,7,5,4),
             (4,5,1,0),
             (1,5,7,2),
             (4,0,3,6)]
# A different color for each side of the cube
_colors = [(  0,   0, 255),
           (255,   0,   0),
           (  0, 255,   0),
           (  0, 255, 255),
           (255, 255,   0),
           (255,   0, 255)]

class Cube:
    def __init__(self):
        self.axis = np.asfarray([3.0,1.0,1.0])
        self.axis /= np.linalg.norm(self.axis)
        self.apply = FPQuaternion()
        self.rot = FPQuaternion()

    def ProcessEvent(self, event):
        # Assignment #1 part 1 of 2
        # In this method write code to make the cube rotate in the given direction in response to these keys
        # Some code is provided for you
        # You may not import any module except the ones imported above
        # You may not use any code copied from the internet (write your own code so you become a better programmer)
        # You may not modify any code outside the assignment part 1 and 2 sections

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_w: # Rotate Up
                # Your code here
                return True
            if event.key == pygame.K_x: # Rotate Down
                # Your code here
                return True
            if event.key == pygame.K_a: # Rotate Left
                # Your code here
                return True
            if event.key == pygame.K_d: # Rotate Right
                # Your code here
                return True
            if event.key == pygame.K_s: # Rotate CounterClockwise
                # Your code here
                return True
            if event.key == pygame.K_f: # Rotate Clockwise
                # Your code here
                return True
        return False

    def Update(self, deltaTime):
        if deltaTime:
            self.apply.Assign(0.5 * deltaTime, self.axis, _normalized = True)
            self.rot *= self.apply

    def Render(self, modelview, camVec, screen):
        global _verts
        global _surfaces
        global _colors

        # Assignment #1 part 2 of 2
        # After you do part 1 you may notice a problem with the way the cube rotates
        #   If you rotate it a little one way, then when you rotate it a perpendicular way
        #   it doesnâ€™t rotate in the right direction. This kind of problem is caused by things like
        #   order of matrix operations, but can also mean you need to invert or transpose your matrix.
        # Modify the code in this section to make the cube rotate in the correct direction from the camera viewpoint
        # You may not import any module except the ones imported above
        # You may not use any code copied from the internet (write your own code so you become a better programmer)
        # You may not modify any code outside the assignment part 1 and 2 sections

        # Get the matrix that is a combination of the cube position and the camera position
        # BEGIN section
            
        # Your code here
        
        m = modelview * self.rot.GetMatrix()
        # END section

        for i in range(len(_surfaces)):
            # Apply the new position to each vertex of this face of the cube
            fppoints = []
            for vert in _surfaces[i]:
                v = _verts[vert] * m
                fppoints.append(v)

            v1 = fppoints[1] - fppoints[0]
            v2 = fppoints[2] - fppoints[1]
            vc = FPDecVec3.Cross(v1, v2)
            if FPDecVec3.Dot(vc, camVec) <= 0:
                continue

            # Draw this face of the cube (to do that we first convert our fixed-point numbers to regular integers which pygame.draw requires)
            points = []
            for j in range(len(fppoints)):
                points.append([int(fppoints[j][d]) for d in range(2)])
            pygame.draw.polygon(screen, _colors[i], points)
fpmatrix.py

import numpy as np
import fpdecimal as fpd
from fpvector import FPDecPoint3
from fpvector import FPDecVec3
import math

# Fixed-Point 4x4 Matrix Class
class FPDecMtx44:
    # Input Options
    #   None: identity
    #   FPDecMtx44: copy
    #   4x4 tuple, list, ndarray: copy
    #   _converted - True means don't convert it to fixed-point if the type is np.longlong because it was already converted
    def __init__(self, value = None, _converted = False):
        self.Assign(value=value, _converted=_converted)
        
    def Assign(self, value = None, _converted = False):
        if value is None:
            self.m = np.identity(4, dtype=np.longlong) * fpd.gDecMult
            return
        if isinstance(value, FPDecMtx44):
            self.m = value.m.copy()
            return
        if isinstance(value, np.ndarray) and value.shape == (4, 4):
            self.m = value.astype(np.longlong) * fpd.gDecMult
            return
        if (isinstance(value, tuple) or isinstance(value, list)) and len(value) == 4:
            for i in range(4):
                if not (isinstance(value[i], tuple) or isinstance(value[i], list)):
                    break
                if len(value[i]) != 4:
                    break
            else:
                self.m = np.array([[value[y][x] if _converted and isinstance(value[y][x], np.longlong) else fpd.FPDecFromAny(value[y][x]) for x in range(4)] for y in range(4)], dtype=np.longlong)
                return
        raise NotImplementedError

    #
    # Overrides to support list indexing: getitem returns FPDecimal
    #

    class __getsetHelper():
        def __init__(self, vw): self.vw = vw
        def __getitem__(self, key):
            if isinstance(key, int):
                if key < -4 or key > 3: raise IndexError
                return fpd.FPDecimal(self.vw[key], _converted=True)
            raise TypeError
        def __setitem__(self, key, value):
            if isinstance(key, int):
                if key < -4 or key > 3: raise IndexError
                self.vw[key] = fpd.FPDecFromAny(value)
                return
            raise TypeError

    def __getitem__(self, key):
        if isinstance(key, int):
            if key < -4 or key > 3:
                raise IndexError
            return FPDecMtx44.__getsetHelper(self.m[key])
        if isinstance(key, tuple) and len(key) == 2:
            if key[0] < -4 or key[0] > 3 or key[1] < -4 or key[1] > 3:
                raise IndexError
            return fpd.FPDecimal(self.m[key], _converted=True)
        raise TypeError

    def __setitem__(self, key, value):
        if isinstance(key, tuple) and len(key) == 2:
            if key[0] < -4 or key[0] > 3 or key[1] < -4 or key[1] > 3:
                raise IndexError
            self.m[key] = fpd.FPDecFromAny(value)
            return
        raise TypeError

    #
    # Overrides to support list() and tuple() for this type: returns 4x4 lists of FPDecimal
    #

    def __list__(self):
        return [[fpd.FPDecimal(self.m[y,x], _converted=True) for x in range(4)] for y in range(4)]

    def __tuple__(self):
        return tuple([[fpd.FPDecimal(self.m[y,x], _converted=True) for x in range(4)] for y in range(4)])

    #
    # Overrides to support str() and repr() for this type
    #

    def __toStrHelper(self, cb):
        width = 1
        lst = []
        for y in range(4):
            for x in range(4):
                q = cb(y,x)
                lst.append(q)
                if len(q) > width:
                    width = len(q)
        s = ""
        lp = 0
        for y in range(4):
            s += "["
            for x in range(4):
                q = lst[lp]
                lp += 1
                if len(q) < width:
                    q = (" " * (width - len(q))) + q
                s += q
                if x < 3:
                    s += ", "
            s += "]"
            if y < 3:
                s += "\n"
        return s

    def __str__(self):
        return self.__toStrHelper(lambda y,x: "%0.3f" % (float(self.m[y,x]) / fpd.gDecMult, ))

    def __repr__(self):
        return self.__toStrHelper(lambda y,x: fpd.FPDecToStr(self.m[y,x]))

    #
    # Overrides to support basic math operations on this type
    #

    def __mul__(self, other):
        m = FPDecMtx44(self)
        if isinstance(other, FPDecMtx44):
            m.m //= fpd.gDecHalfMult
            m.m = np.matmul(m.m, other.m // fpd.gDecHalfMult, dtype=np.longlong)
            return m
        return NotImplemented

    def __imul__(self, other):
        if isinstance(other, FPDecMtx44):
            self.m //= fpd.gDecHalfMult
            self.m = np.matmul(self.m, other.m // fpd.gDecHalfMult, dtype=np.longlong)
            return self
        return NotImplemented

    def __rmul__(self, other):
        if isinstance(other, FPDecPoint3) or isinstance(other, FPDecVec3):
            m = np.matmul(self.m // fpd.gDecHalfMult, other.v // fpd.gDecHalfMult, dtype=np.longlong)
            if isinstance(other, FPDecVec3):
                v = FPDecVec3(m, _converted = True)
            else:
                v = FPDecPoint3(m, _converted = True)
                if m[3] == -0:
                    v /= -0.00001
                elif m[3] == 0:
                    v /= 0.00001
                else:
                    v /= fpd.FPDecimal(m[3], _converted=True)
            return v
        return NotImplemented

    #
    # Overrides to support conditional operations == != on this type
    #

    def __eq__(self, other):
        if isinstance(other, FPDecMtx44):
            return np.all(np.equal(self.m, other.m))
        return NotImplemented

    def __ne__(self, other):
        if isinstance(other, FPDecMtx44):
            return np.any(np.not_equal(self.m, other.m))
        return NotImplemented

    #
    # Common Matrix operations
    #

    def Transpose(self):
        self.m = np.transpose(self.m)

    def Inverse(self):
        m = np.hstack((self.m, np.identity(4, dtype=np.longlong) * fpd.gDecMult))
        for j in range(4):

            bk = j
            best = abs(m[bk,j])
            for k in range(j+1, 4):
                a = abs(m[k,j])
                if a > best:
                    best = a
                    bk = k
            if best == 0:
                raise NotImplementedError

            if bk != j:
                m[[j,bk]] = m[[bk,j]]

            v = m[j,j]
            if v != fpd.gDecMult:
                s = m[j].copy()
                m[j] *= fpd.gDecHalfMult
                if np.any(np.not_equal(m[j] // fpd.gDecHalfMult, s)): # overflow
                    m[j] = np.longlong(s // (v / fpd.gDecMult))
                else:
                    m[j] //= v // fpd.gDecHalfMult

            for k in range(4):
                if k == j or m[k,j] == 0: continue
                r = m[j].copy() // fpd.gDecHalfMult
                r *= -m[k,j] // fpd.gDecHalfMult
                m[k] += r

        self.m = m[:,4:].copy()

    #   _converted - True means don't convert it to fixed-point if the type is np.longlong because it was already converted
    @staticmethod
    def GetTranslateMtx(*args, _converted = False):
        v = FPDecVec3(*args, _converted=_converted)
        m = FPDecMtx44()
        m.m[:3,3] = v.v[:3].copy()
        return m

    #   _converted - True means don't convert it to fixed-point if the type is np.longlong because it was already converted
    @staticmethod
    def GetScaleMtx(*args, _converted = False):
        v = FPDecVec3(*args, _converted=_converted)
        m = FPDecMtx44()
        for i in range(3):
            m.m[i,i] = v.v[i]
        return m

    #   _converted - True means don't convert it to fixed-point if the type is np.longlong because it was already converted
    #   _normalized - True means don't normalize the axis because it was already normalized
    @staticmethod
    def GetRotateMtx(angle, *args, _converted = False, _normalized = False): # angle is in radians
        v = FPDecVec3(*args, _converted=_converted)
        if not _normalized:
            v.Normalize()
        m = FPDecMtx44()
        aa = fpd.FPDecimal(angle, _converted=_converted)
        a = float(aa)
        co = math.cos(a)
        co1 = 1.0 - co
        co = int(co * fpd.gDecMult)
        sn = math.sin(a)
        fun = lambda a,b: int(co1 * (v.v[a] // fpd.gDecHalfMult) * (v.v[b] // fpd.gDecHalfMult))
        xy = fun(0, 1)
        xz = fun(0, 2)
        yz = fun(1, 2)
        x = int(sn * v.v[0])
        y = int(sn * v.v[1])
        z = int(sn * v.v[2])
        m.m[0,0] = co + fun(0, 0)
        m.m[0,1] = xy - z
        m.m[0,2] = xz + y
        m.m[1,0] = xy + z
        m.m[1,1] = co + fun(1, 1)
        m.m[1,2] = yz - x
        m.m[2,0] = xz - y
        m.m[2,1] = yz + x
        m.m[2,2] = co + fun(2, 2)
        return m


#mt1 = FPDecMtx44.GetTranslateMtx(1,2,3)
#mt2 = FPDecMtx44.GetTranslateMtx(1,2,3)
#print(mt2)
#mt2.Inverse()
#print(mt2)
#print(mt1 * mt2)
#mt2 = FPDecMtx44.GetTranslateMtx(4,5,6)
#mt3 = FPDecMtx44.GetScaleMtx(7,8,9)
#mt4 = FPDecMtx44.GetRotateMtx(3.14, 0, 1, 0)
#print(mt3)
#print(repr(mt3))
#vt = FPDecVec3(1,1,1)
#vt *= mt3
#print(vt)
#pt = FPDecPoint3(1,1,1)
#print(pt * mt2)
fpquaternion.py
import numpy as np
import fpdecimal as fpd
from fpvector import FPDecPoint3
from fpvector import FPDecVec3
from fpmatrix import FPDecMtx44
import math

# Fixed-Point Quaternion Class
class FPQuaternion:
    # Input Options
    #   None: identity
    #   FPQuaternion: copy
    #
    #  FROM ANGLE/AXIS
    #   angle (radians), tuple/list/ndarray/FPDecVec3 (arg[1]): copy 1 to 3 elements
    #   angle (radians), tuple/list/ndarray/FPDecVec3 (arg[1:]): copy 1 to 3 elements
    #
    #  FROM TWO VECTORS
    #   tuple/list/ndarray/FPDecVec3 (arg[0] = destination), tuple/list/ndarray/FPDecVec3 (arg[1] = source)
    #   tuple/list/ndarray/FPDecVec3 (arg[0] = destination), tuple/list/ndarray/FPDecVec3 (arg[1:] = source)
    #
    #   _converted - True means don't convert it to fixed-point if the type is np.longlong because it was already converted
    #   _normalized - True means don't normalize the axis because it was already normalized
    def __init__(self, *args, _converted = False, _normalized = False):
        self.Assign(*args, _converted=_converted, _normalized=_normalized)

    def Assign(self, *args, _converted = False, _normalized = False):
        if len(args) == 0:
            self.q = np.array([0, 0, 0, fpd.gDecMult], dtype=np.longlong)
            return
        if len(args) == 1 and isinstance(args[0], FPQuaternion):
            self.q = args[0].q.copy()
            return

        angle = None
        first = None
        _c1 = _converted
        _c2 = _converted
        if len(args) >= 2:
            if isinstance(args[0], float) or isinstance(args[0], int) or isinstance(args[0], np.longlong):
                angle = args[0]
            elif isinstance(args[0], tuple) or isinstance(args[0], list) or isinstance(args[0], np.ndarray):
                first = args[0]
            elif isinstance(args[0], FPDecVec3):
                first = args[0].v
                _c1 = True
            args = args[1:]

            if len(args) == 1:
                if isinstance(args[0], tuple) or isinstance(args[0], list) or isinstance(args[0], np.ndarray):
                    vec = args[0]
                elif isinstance(args[0], FPDecVec3):
                    vec = args[0].v
                    _c2 = True
                else:
                    vec = args
            else:
                vec = args
        else:
            raise NotImplementedError

        axis = FPDecVec3(*vec, _converted=_c2)
        if axis.IsZero():
            raise NotImplementedError

        if first is not None:
            axis0 = FPDecVec3(*first, _converted=_c1)
            if axis0.IsZero():
                raise NotImplementedError
            if not _normalized:
                axis0.Normalize()
            axis1 = FPDecVec3(axis)
            if not _normalized:
                axis1.Normalize()
            
            axis = FPDecVec3.Cross(axis1, axis0)
            dot = FPDecVec3.Dot(axis0, axis1)
            dot = min(max(dot, -1), 1)
            angle = math.acos(float(dot))

            _normalized = False
            _converted = False

        if angle is not None:
            # quaternion from angle and axis
            if not _normalized and not axis.IsZero():
                axis.Normalize()
            elif axis.IsZero():
                angle = math.fmod(angle, math.pi * 2)
                if angle > math.pi / 2 and angle <= math.pi * 3 / 2:
                    self.q = np.array([0, fpd.gDecMult, 0, 0], dtype=np.longlong)
                else:
                    self.q = np.array([0, 0, 0, fpd.gDecMult], dtype=np.longlong)
                return
            aa = float(fpd.FPDecimal(angle, _converted=_converted) / 2)
            axis2 = axis * math.sin(aa)
            self.q = np.array([*axis2.v[0:3], math.cos(aa) * fpd.gDecMult], dtype=np.longlong)
            self.Normalize()
            return

        raise NotImplementedError

    #
    # Overrides to support list indexing: getitem returns FPDecimal
    #

    def __getitem__(self, key):
        if isinstance(key, int):
            if key < -4 or key > 3:
                raise IndexError
            return fpd.FPDecimal(self.q[key], _converted=True)
        raise TypeError

    def __setitem__(self, key, value):
        if isinstance(key, int):
            if key < -4 or key > 3:
                raise IndexError
            self.q[key] = fpd.FPDecFromAny(value)
            return
        raise TypeError

    def GetAxis(self):
        return FPDecVec3(self.q, _converted=True)

    def GetAngle(self): # angle is in radians
        a = self.q[3] / fpd.gDecMult
        if a > 1: a = 1
        if a < -1: a = -1
        return fpd.FPDecimal(math.acos(a) * 2)

    #
    # Overrides to support list() and tuple() for this type: returns lists of FPDecimal
    #

    def __list__(self):
        return [fpd.FPDecimal(self.q[i], _converted=True) for i in range(4)]

    def __tuple__(self):
        return tuple([fpd.FPDecimal(self.q[i], _converted=True) for i in range(4)])

    def __len__(self):
        return 4

    #
    # Overrides to support str() and repr() for this type
    #

    def __str__(self):
        s = "{"
        for i in range(4):
            s += str(float(self.q[i]) / fpd.gDecMult)
            if i < 3:
                s += ("ijk")[i]
                s += " + "
        s += "}"
        return s

    def __repr__(self):
        s = "{<"
        for i in range(4):
            s += fpd.FPDecToStr(self.q[i])
            if i == 2:
                s += "> "
            elif i < 3:
                s += ", "
        s += "}"
        return s

    #
    # Overrides to support basic math operations on this type
    #

    @staticmethod
    def _mulHelper(d, other):
        if isinstance(other, FPQuaternion):
            s = d.q // fpd.gDecHalfMult
            o = other.q // fpd.gDecHalfMult
            d.q[0] = s[3]*o[0] + s[0]*o[3] + s[1]*o[2] - s[2]*o[1]
            d.q[1] = s[3]*o[1] - s[0]*o[2] + s[1]*o[3] + s[2]*o[0]
            d.q[2] = s[3]*o[2] + s[0]*o[1] - s[1]*o[0] + s[2]*o[3]
            d.q[3] = s[3]*o[3] - s[0]*o[0] - s[1]*o[1] - s[2]*o[2]
            d.Normalize()
            return d
        return None

    def __mul__(self, other):
        d = FPQuaternion._mulHelper(FPQuaternion(self), other)
        if d is None:
            return NotImplemented
        return d

    def __imul__(self, other):
        d = FPQuaternion._mulHelper(self, other)
        if d is None:
            return NotImplemented
        return d

    def __rmul__(self, other):
        if isinstance(other, FPDecPoint3) or isinstance(other, FPDecVec3):
            s = self.q // fpd.gDecHalfMult
            o = other.v // fpd.gDecHalfMult
            ss = s * s
            ss //= fpd.gDecHalfMult
            xy = s[0]*s[1] // fpd.gDecHalfMult
            xz = s[0]*s[2] // fpd.gDecHalfMult
            xa = s[0]*s[3] // fpd.gDecHalfMult
            yz = s[1]*s[2] // fpd.gDecHalfMult
            ya = s[1]*s[3] // fpd.gDecHalfMult
            za = s[2]*s[3] // fpd.gDecHalfMult
            m = [
                np.longlong((ss[3]+ss[0]-ss[1]-ss[2]) * o[0] + ((xy-za) * o[1] + (xz+ya) * o[2]) * 2),
                np.longlong((ss[3]-ss[0]+ss[1]-ss[2]) * o[1] + ((xy+za) * o[0] + (yz-xa) * o[2]) * 2),
                np.longlong((ss[3]-ss[0]-ss[1]+ss[2]) * o[2] + ((xz-ya) * o[0] + (yz+xa) * o[1]) * 2)
            ]
            if isinstance(other, FPDecVec3):
                v = FPDecVec3(m, _converted = True)
            else:
                v = FPDecPoint3(m, _converted = True)
            return v
        return NotImplemented

    #
    # Overrides to support conditional operations == != on this type
    #

    def __eq__(self, other):
        if isinstance(other, FPQuaternion):
            return np.all(np.equal(self.q, other.q)) or np.all(np.equal(self.q, other.q * -1))
        return NotImplemented

    def __ne__(self, other):
        if isinstance(other, FPQuaternion):
            return np.any(np.not_equal(self.q, other.q)) and np.any(np.not_equal(self.q, other.q * -1))
        return NotImplemented

    #
    # Common Quaternion operations
    #

    def Invert(self):
        if self.q[3] == 0:
            self.q = np.negative(self.q)
        else:
            self.q[3] = -self.q[3]

    def Normalize(self):
        q = self.q // fpd.gDecHalfMult
        d = np.sum(q * q, dtype=np.longlong)
        ll = np.longlong(math.sqrt(d / fpd.gDecMult) * fpd.gDecHalfMult)
        s = self.q.copy()
        self.q *= fpd.gDecHalfMult
        if np.any(np.not_equal(self.q // fpd.gDecHalfMult, s)):
            # it overflowed past the max size of the integer, so calculate a different way
            self.q = np.longlong(s // (ll / fpd.gDecHalfMult))
        else:
            self.q //= ll

    #https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm
    #https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/jay.htm
    def GetMatrix(self):
        m1 = FPDecMtx44([[ self.q[3],-self.q[2], self.q[1], self.q[0]],
                         [ self.q[2], self.q[3],-self.q[0], self.q[1]],
                         [-self.q[1], self.q[0], self.q[3], self.q[2]],
                         [-self.q[0],-self.q[1],-self.q[2], self.q[3]]], _converted = True)
        m2 = FPDecMtx44([[ self.q[3],-self.q[2], self.q[1],-self.q[0]],
                         [ self.q[2], self.q[3],-self.q[0],-self.q[1]],
                         [-self.q[1], self.q[0], self.q[3],-self.q[2]],
                         [ self.q[0], self.q[1], self.q[2], self.q[3]]], _converted = True)
        return m1 * m2

#q = FPQuaternion(math.radians(90), 1, 0, 0, _normalized = True)
#print(q)
#print(repr(q))
#q2 = q * q
#print(q2)
#print(repr(q2))
#v = FPDecVec3(1, 2, 3)
#print(v)
#v2 = v * q
#print(v2)
#v3 = v * q2
#print(v3)
#m = q.GetMatrix()
#v4 = v * m
#print(v4)
#q3 = FPQuaternion((0, 1, 0), (1, 0, 0), _normalized = True)
#print(q3)
#print(repr(q3))
#v5 = FPDecVec3(1, 0, 0)
#v6 = v5 * q3
#print(v6)

fpvector.py:

import numpy as np
import fpdecimal as fpd
import math
import warnings

warnings.filterwarnings("error")

# Fixed-Point 3D Point Class
class FPDecPoint3:
    # Input Options
    #   None: (0,0,0)
    #   FPDecPoint3: copy
    #   tuple, list, ndarray (arg[0]): copy 1 to 3 elements
    #   tuple, list, ndarray (*arg): copy 1 to 3 elements
    #   _converted - True means don't convert it to fixed-point if the type is np.longlong because it was already converted
    def __init__(self, *args, _converted = False):
        self.Assign(*args, _converted = _converted)
        
    def Assign(self, *args, _converted = False):
        if len(args) == 1 and isinstance(args[0], FPDecPoint3):
            self.v = args[0].v.copy()
            return
        self.v = self._initHelper(*args, _converted=_converted)
        if self.v is None:
            raise NotImplementedError
        self.v[3] = fpd.gDecMult

    def _initHelper(self, *args, _converted = False):
        if len(args) == 0:
            return np.array([0, 0, 0, 0], dtype=np.longlong)
        if len(args) == 1 and (isinstance(args[0], tuple) or isinstance(args[0], list) or isinstance(args[0], np.ndarray)):
            args = args[0]
        if (isinstance(args, tuple) or isinstance(args, list) or (isinstance(args, np.ndarray) and args.ndim == 1)) and len(args) <= 4:
            return np.array([((args[i] if _converted and isinstance(args[i], np.longlong) else fpd.FPDecFromAny(args[i])) if i < len(args) and i < 3 else 0) for i in range(4)], dtype=np.longlong)
        return None

    #
    # Overrides to support list indexing: getitem returns FPDecimal
    #

    def __getitem__(self, key):
        if isinstance(key, int):
            if key < -4 or key > 3:
                raise IndexError
            return fpd.FPDecimal(self.v[key], _converted=True)
        raise TypeError

    def __setitem__(self, key, value):
        if isinstance(key, int):
            if key < -4 or key > 3:
                raise IndexError
            self.v[key] = fpd.FPDecFromAny(value)
            return
        raise TypeError

    #
    # Overrides to support list() and tuple() for this type: returns lists of FPDecimal
    #

    def __list__(self):
        return [fpd.FPDecimal(self.v[i], _converted=True) for i in range(4)]

    def __tuple__(self):
        return tuple([fpd.FPDecimal(self.v[i], _converted=True) for i in range(4)])

    def __len__(self):
        return 4

    #
    # Overrides to support str() and repr() for this type
    #

    def __str__(self):
        s = "("
        for i in range(4):
            s += str(float(self.v[i]) / fpd.gDecMult)
            if i < 2:
                s += ", "
            elif i == 2:
                s += "; "
        s += ")"
        return s

    def __repr__(self):
        s = "("
        for i in range(4):
            s += fpd.FPDecToStr(self.v[i])
            if i < 2:
                s += ", "
            elif i == 2:
                s += "; "
        s += ")"
        return s

    #
    # Overrides to support basic math operations on this type
    #

    def __add__(self, other):
        d = FPDecPoint3(self)
        if isinstance(other, FPDecVec3):
            d.v += other.v
            return d
        if isinstance(other, FPDecPoint3):
            d.v[0:3] += other.v[0:3]
            return d
        return NotImplemented

    def __iadd__(self, other):
        if isinstance(other, FPDecVec3):
            self.v += other.v
            return self
        if isinstance(other, FPDecPoint3):
            self.v[0:3] += other.v[0:3]
            return self
        return NotImplemented

    def __radd__(self, other):
        return NotImplemented

    def __sub__(self, other):
        if isinstance(other, FPDecVec3):
            d = FPDecPoint3(self)
            d.v -= other.v
            return d
        if isinstance(other, FPDecPoint3):
            d = FPDecVec3(self.v, _converted = True)
            d.v[:3] -= other.v[:3]
            return d
        return NotImplemented

    def __isub__(self, other):
        if isinstance(other, FPDecVec3):
            self.v -= other.v
            return self
        return NotImplemented

    def __rsub__(self, other):
        return NotImplemented

    @staticmethod
    def _mulHelper(d, other):
        if isinstance(other, fpd.FPDecimal):
            d.v[:3] //= fpd.gDecHalfMult
            d.v[:3] *= other.d // fpd.gDecHalfMult
            return d
        if isinstance(other, int) or isinstance(other, float):
            d.v[:3] //= fpd.gDecHalfMult
            d.v[:3] *= np.longlong(other * fpd.gDecHalfMult)
            return d
        if isinstance(other, FPDecVec3):
            v = other.v[:3].copy()
            d.v[:3] //= fpd.gDecHalfMult
            d.v[:3] *= v // fpd.gDecHalfMult
            return d
        return None

    def __mul__(self, other):
        d = FPDecPoint3._mulHelper(FPDecPoint3(self), other)
        if d is None:
            return NotImplemented
        return d

    def __imul__(self, other):
        d = FPDecPoint3._mulHelper(self, other)
        if d is None:
            return NotImplemented
        return d

    def __rmul__(self, other):
        return NotImplemented

    @staticmethod
    def _divHelper(d, other):
        if isinstance(other, fpd.FPDecimal):
            s = d.v[:3].copy()
            try:
                d.v[:3] *= fpd.gDecHalfMult
            except:
                d.v[:3] = s // (other.d // fpd.gDecMult)
                return d
            d.v[:3] //= other.d // fpd.gDecHalfMult
            return d
        if isinstance(other, int) or isinstance(other, float):
            d.v[:3] //= np.longlong(other * fpd.gDecHalfMult)
            d.v[:3] *= fpd.gDecHalfMult
            return d
        if isinstance(other, FPDecVec3):
            v = other.v[:3].copy()
            s = d.v[:3].copy()
            try:
                d.v[:3] *= fpd.gDecHalfMult
            except:
                d.v[:3] = s // (v // fpd.gDecMult)
                return d
            d.v[:3] //= v // fpd.gDecHalfMult
            return d
        return None

    def __truediv__(self, other):
        d = FPDecPoint3._divHelper(FPDecPoint3(self), other)
        if d is None:
            return NotImplemented
        return d

    def __itruediv__(self, other):
        d = FPDecPoint3._divHelper(self, other)
        if d is None:
            return NotImplemented
        return d

    def __rtruediv__(self, other):
        return NotImplemented

    def __floordiv__(self, other):
        return NotImplemented

    def __ifloordiv__(self, other):
        return NotImplemented

    def __rfloordiv__(self, other):
        return NotImplemented

    #
    # Overrides to support conditional operations == != on this type
    #

    def __eq__(self, other):
        if isinstance(other, FPDecPoint3) and not isinstance(other, FPDecVec3):
            return np.all(np.equal(self.v, other.v))
        return NotImplemented

    def __ne__(self, other):
        if isinstance(other, FPDecPoint3) and not isinstance(other, FPDecVec3):
            return np.any(np.not_equal(self.v, other.v))
        return NotImplemented

    def IsZero(self):
        return not np.any(self.v[0:3])




# Fixed-Point 3D Vector Class
class FPDecVec3(FPDecPoint3):
    # Input Options
    #   None: (0,0,0)
    #   FPDecPoint3: copy
    #   tuple, list, ndarray (arg[0]): copy 1 to 3 elements
    #   tuple, list, ndarray (*arg): copy 1 to 3 elements
    #   _converted - True means don't convert it to fixed-point if the type is np.longlong because it was already converted
    def __init__(self, *args, _converted = False):
        self.Assign(*args, _converted=_converted)
        
    def Assign(self, *args, _converted = False):
        if len(args) == 1 and isinstance(args[0], FPDecVec3):
            self.v = args[0].v.copy()
            return
        self.v = self._initHelper(*args, _converted=_converted)
        if self.v is None:
            raise NotImplementedError

    #
    # Overrides to support str() and repr() for this type
    #

    def __str__(self):
        s = "<"
        for i in range(4):
            s += str(float(self.v[i]) / fpd.gDecMult)
            if i < 2:
                s += ", "
            elif i == 2:
                s += "; "
        s += ">"
        return s

    def __repr__(self):
        s = "<"
        for i in range(4):
            s += fpd.FPDecToStr(self.v[i])
            if i < 2:
                s += ", "
            elif i == 2:
                s += "; "
        s += ">"
        return s

    #
    # Overrides to support basic math operations on this type
    #

    def __add__(self, other):
        d = FPDecVec3(self)
        if isinstance(other, FPDecVec3):
            d.v += other.v
            return d
        return NotImplemented

    def __sub__(self, other):
        d = FPDecVec3(self)
        if isinstance(other, FPDecVec3):
            d.v -= other.v
            return d
        return NotImplemented

    def __neg__(self):
        return FPDecVec3(np.negative(self.v), _converted = True)

    def __mul__(self, other):
        d = FPDecPoint3._mulHelper(FPDecVec3(self), other)
        if d is None:
            return NotImplemented
        return d

    def __truediv__(self, other):
        d = FPDecPoint3._divHelper(FPDecVec3(self), other)
        if d is None:
            return NotImplemented
        return d

    #
    # Overrides to support conditional operations == != > < >= <= on this type
    # These compare vector lengths with both scalars and other vectors
    # Exception: == and != between two vectors will just compare the numbers
    #

    def __eq__(self, other):
        if isinstance(other, FPDecVec3):
            return np.all(np.equal(self.v, other.v))
        if isinstance(other, int) or isinstance(other, float) or isinstance(other, fpd.FPDecimal):
            return self.SqrLength() == other * other
        return NotImplemented

    def __ne__(self, other):
        if isinstance(other, FPDecVec3):
            return np.any(np.not_equal(self.v, other.v))
        if isinstance(other, int) or isinstance(other, float) or isinstance(other, fpd.FPDecimal):
            return self.SqrLength() != other * other
        return NotImplemented

    def __lt__(self, other):
        if isinstance(other, FPDecVec3):
            return self.SqrLength() < other.SqrLength()
        if isinstance(other, int) or isinstance(other, float) or isinstance(other, fpd.FPDecimal):
            return self.SqrLength() < other * other
        return NotImplemented

    def __gt__(self, other):
        if isinstance(other, FPDecVec3):
            return self.SqrLength() > other.SqrLength()
        if isinstance(other, int) or isinstance(other, float) or isinstance(other, fpd.FPDecimal):
            return self.SqrLength() > other * other
        return NotImplemented

    def __le__(self, other):
        if isinstance(other, FPDecVec3):
            return self.SqrLength() <= other.SqrLength()
        if isinstance(other, int) or isinstance(other, float) or isinstance(other, fpd.FPDecimal):
            return self.SqrLength() <= other * other
        return NotImplemented

    def __ge__(self, other):
        if isinstance(other, FPDecVec3):
            return self.SqrLength() >= other.SqrLength()
        if isinstance(other, int) or isinstance(other, float) or isinstance(other, fpd.FPDecimal):
            return self.SqrLength() >= other * other
        return NotImplemented

    #
    # Common Vector operations
    #

    def SqrLength(self):
        return FPDecVec3.Dot(self, self)

    def Length(self):
        d = self.SqrLength()
        if d < 0: # backup if there is an overflow
            v = self.v / fpd.gDecMult
            d.d = np.longlong(math.sqrt(np.sum(v * v)) * fpd.gDecMult)
            return d
        d.d = np.longlong(math.sqrt(d.d / fpd.gDecMult) * fpd.gDecMult)
        return d

    def Normalize(self):
        l = self.Length()
        if l == 0:
            return
        self /= l

    @staticmethod
    def Dot(a, b):
        if (isinstance(a, FPDecVec3) and isinstance(b, FPDecVec3)) or \
           (isinstance(a, FPDecPoint3) and isinstance(b, FPDecVec3)):
            return fpd.FPDecimal(np.sum((a * b).v[:3], dtype=np.longlong), _converted=True)
        if isinstance(a, FPDecVec3) and isinstance(b, FPDecPoint3):
            return fpd.FPDecimal(np.sum((b * a).v[:3], dtype=np.longlong), _converted=True)
        raise NotImplementedError

    @staticmethod
    def Cross(a, b):
        if isinstance(a, FPDecVec3) and isinstance(b, FPDecVec3):
            return FPDecVec3(np.cross(a.v[:3] // fpd.gDecHalfMult, b.v[:3] // fpd.gDecHalfMult).astype(np.longlong), _converted=True)
        raise NotImplementedError

#a = FPDecVec3(0,0,2)
#b = FPDecVec3(0,2,0)
#c = FPDecVec3.Cross(a, b)
#print(c.Length())
#print(repr(c))

main.py:
import numpy as np
import pygame
import math

from fpvector import FPDecPoint3
from fpvector import FPDecVec3
from fpmatrix import FPDecMtx44
from fpquaternion import FPQuaternion

# Eight corners of the cube as points
_verts = [FPDecPoint3(1, -1, -1),
          FPDecPoint3(1, 1, -1),
          FPDecPoint3(-1, 1, -1),
          FPDecPoint3(-1, -1, -1),
          FPDecPoint3(1, -1, 1),
          FPDecPoint3(1, 1, 1),
          FPDecPoint3(-1, -1, 1),
          FPDecPoint3(-1, 1, 1)]
# Six sides of the cube as indexes into the list of _verts
_surfaces = [(0, 1, 2, 3),
             (3, 2, 7, 6),
             (6, 7, 5, 4),
             (4, 5, 1, 0),
             (1, 5, 7, 2),
             (4, 0, 3, 6)]
# A different color for each side of the cube
_colors = [(0, 0, 255),
           (255, 0, 0),
           (0, 255, 0),
           (0, 255, 255),
           (255, 255, 0),
           (255, 0, 255)]

class Cube:
    def __init__(self):
        self.axis = np.asfarray([3.0, 1.0, 1.0])
        self.axis /= np.linalg.norm(self.axis)
        self.apply = FPQuaternion()
        self.rot = FPQuaternion()

    def ProcessEvent(self, event):
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_w:  # Rotate Up
                self.rot *= FPQuaternion.from_axis_angle(self.axis, math.radians(-10))
                return True
            if event.key == pygame.K_x:  # Rotate Down
                self.rot *= FPQuaternion.from_axis_angle(self.axis, math.radians(10))
                return True
            if event.key == pygame.K_a:  # Rotate Left
                self.rot *= FPQuaternion.from_axis_angle(np.cross(self.axis, [0, 1, 0]), math.radians(-10))
                return True
            if event.key == pygame.K_d:  # Rotate Right
                self.rot *= FPQuaternion.from_axis_angle(np.cross(self.axis, [0, 1, 0]), math.radians(10))
                return True
            if event.key == pygame.K_s:  # Rotate CounterClockwise
                self.rot *= FPQuaternion.from_axis_angle(np.cross(self.axis, [1, 0, 0]), math.radians(-10))
                return True
            if event.key == pygame.K_f:  # Rotate Clockwise
                self.rot *= FPQuaternion.from_axis_angle(np.cross(self.axis, [1, 0, 0]), math.radians(10))
                return True
        return False

    def Update(self, deltaTime):
        if deltaTime:
            self.apply.assign(0.5 * deltaTime, self.axis, _normalized=True)
            self.rot *= self.apply

    def Render(self, modelview, camVec, screen):
        global _verts
        global _surfaces
        global _colors

        m = modelview * self.rot.get_matrix()

        for i in range(len(_surfaces)):
            fppoints = []
            for vert in _surfaces[i]:
                v = _verts[vert] * m
                fppoints.append(v)

            v1 = fppoints[1] - fppoints[0]
            v2 = fppoints[2] - fppoints[1]
            vc = FPDecVec3.cross(v1, v2)
            if FPDecVec3.dot(vc, camVec) <= 0:
                continue

            points = []
            for j in range(len(fppoints)):
                points.append([int(fppoints[j][d]) for d in range(2)])
            pygame.draw.polygon(screen, _colors[i], points)
